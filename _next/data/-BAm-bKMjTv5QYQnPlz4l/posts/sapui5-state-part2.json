{"pageProps":{"post":{"title":"Как запилить рективность на SAPUI5 -- часть 2","date":"2020-06-21T14:15:07.322Z","slug":"sapui5-state-part2","author":{"name":"Roman A. Nosov","picture":"/assets/blog/authors/romannosov.png"},"content":"<p>С концептом реактивности в <em>SAPUI5</em> немного разобрались. Осталось углубиться в эту тему чуть-чуть подробнее: разобраться с тем, что же такое <em>expression binding</em> и с чем его едят, а также разобраться с вопросом -- как подписываться на изменение <em>viewState</em> и выполнять по этому событию какой-либо код. </p>\n<p><img src=\"/assets/blog/sapui5-state-part2/%D1%81_%D1%87%D0%B5%D0%BC_%D0%B5%D0%B3%D0%BE_%D0%B5%D0%B4%D1%8F%D1%82.jpg\" alt=\"Что же такое expression binding и с чем его едят\"></p>\n<h2>Что же такое expression binding и с чем его едят</h2>\n<p>В прошлой статье я немного рассказывал о реактивности в sapui5 и показывал пример байндинга контроллов к данным. Если ещё не читали, то <a href=\"/posts/sapui5-state\">(велкам сюда)</a>.</p>\n<p>В тех примерах, байндинги описывались прямо в xml верстке в нужных нам проперти</p>\n<p>Примерно вот в таком формате:</p>\n<pre><code class=\"language-xml\">&#x3C;Control property=\"{modelName>modelProp}\"/>\n</code></pre>\n<p>В этом случае, в проперти контрола автоматически будет попадать значение из модели, и автоматически обновляться, если данные в модели изменились.</p>\n<p>Но это далеко не всё, что мы можем описать прямо во вью в декларативном стиле. Иногда очень хочется как-либо <strong>вычислять</strong> значение поля на основании данных в модели, а не просто выводить какое-то значение.</p>\n<p><strong>Например:</strong></p>\n<ol>\n<li>подкрашивать красным строки таблицы, где значение какого-нибудь столбца меньше нуля</li>\n<li>активировать/деактивировать на основании данных кнопки</li>\n<li>выводить количество записей в массиве и т.д.</li>\n</ol>\n<p><em>Ремарка: сейчас речь пойдет только про </em>expression binding<em>. Про форматтеры поговорим как-нибудь в другой раз.</em></p>\n<p>И такой функционал вычисления свойств <em>sapui5</em> нам охотно может предоставить.</p>\n<p>Всё это выглядит следующим образом: сразу после открывающейся фигурной скобки вставляем знак равенства, так парсер понимает, что дальше будет какое-то вычисляемое поле на js. Далее можно вставить маленький кусочек <em>javaScript</em>, который будет выполняться при вычислении содержимого поля. </p>\n<p><em>(Вставлять туда можно константы, вызовы функций, тренарные?операторы:, регэкспы и прочие прелести жизни.)</em></p>\n<p>Главное -- не переусердствовать и не превратить разметку страницы в помойку. :)</p>\n<pre><code class=\"language-xml\">&#x3C;Control property=\"{= JS_CODE}\"/>\n</code></pre>\n<p>Ссылаться на содержимое модели можно с помощью конструкции <strong>${}</strong>. Например: </p>\n<pre><code class=\"language-xml\">&#x3C;Text text=\"{= 'Hello, ' + ${user>name}}\">\n</code></pre>\n<p>В данном случае, после \"Hello, \" будет подставлено \"name\" из модели \"user\". И если где-то в дальнейшем коде значение этого поля в модели изменится -- автоматически произойдет повторное вычисление всех expression bindings, связанных с этим полем.</p>\n<p><strong>Ахтунг:</strong>\nБудьте внимательны с boolean-аттрибутами! </p>\n<pre><code class=\"language-xml\">&#x3C;Button enabled=\"{= someFunction( ${model>prop} )}\">\n</code></pre>\n<p>В примере выше, значение <em>enabled</em>, которое принимает тип bool принимается из результата функции <em>someFunction</em>. Но если по каким-то причинам из функции возвратится <strong>undefined</strong>, то это значение не будет воспринято как <em>falsy</em> (как во всём остальном js), а мистическим образом конвертируется в true. Так что, конкретно в этом случае, может быть оправдана вот такая грязная и некрасивая запись (за которую, вам могут ударить по рукам):</p>\n<pre><code class=\"language-xml\">&#x3C;Button enabled=\"{= !!someFunction( ${model>prop} )}\">\n&#x3C;!-- или -->\n&#x3C;Button enabled=\"{= someFunction( ${model>prop} ) ? true : false }\">\n</code></pre>\n<p>Попробую привести более полные и понятные примеры того, где эти <em>expression bindings</em> можно удобно использовать:</p>\n<h3>Раскрывающееся меню</h3>\n<p>Допустим, нам требуется выпадающее меню вот с таким поведением: при нажатии на toggleButton должна меняться иконка и открываться дочерняя ветка меню. Как это сделать почти не прибегая к <em>javaScript</em>?</p>\n<p><img src=\"/assets/blog/sapui5-state-part2/menu%20closed.png\" alt=\"menu closed\">\n<img src=\"/assets/blog/sapui5-state-part2/menu%20opened.png\" alt=\"menu opened\"></p>\n<p>Очень просто: использовать для иконок тренарный оператор, который будет вычислять нужную нам иконку. А \"дочернюю\" ветку меню заключить в блок, который делать видимым тогда, когда свойство TransportEnabled в модели будет = true.</p>\n<p>Пример верстки: (проперти, не относящиеся к обсуждаемой теме удалены для наглядности)</p>\n<pre><code class=\"language-xml\">&#x3C;VBox>\n  &#x3C;ToggleButton text=\"Движение транспорта\"\n    icon=\"{= ${/TransportEnabled} ? 'иконка вкл' : 'иконка выкл'\"\n    pressed=\"{/TransportEnabled}\"/>\n  &#x3C;VBox visible=\"{/TransportEnabled}\">\n    &#x3C;ToggleButton text=\"В пути\" \n      icon=\"{= ${/TransportOnWay} ? 'иконка вкл' : 'иконка выкл'}\"\n      pressed=\"{/TransportOnWay}\"/>\n    &#x3C;ToggleButton text=\"На подходе\"\n      icon=\"{= ${/TransportApproaching} ? 'иконка вкл' : 'иконка выкл'}\"\n      pressed=\"{/TransportApproaching}\"/>\n    &#x3C;ToggleButton text=\"Прибыл\" \n      icon=\"{= ${/TransportArrived} ? 'иконка вкл' : 'иконка выкл'}\"\n      pressed=\"{/TransportArrived}\"/>\n  &#x3C;/VBox>\n&#x3C;/VBox>\n</code></pre>\n<h3>Калькулятор</h3>\n<p>Допустим, мы захотели написать простой калькулятор на <em>sapui5</em>. Как нам организовать блокировку кнопки \"decimal point\", когда точка уже введена пользователем? </p>\n<p><img src=\"/assets/blog/sapui5-state-part2/calc%20before.png\" alt=\"calc before\">\n<img src=\"/assets/blog/sapui5-state-part2/calc%20after.png\" alt=\"calc after\"></p>\n<p><em>Не сильно заметно, но на втором скрине кнопка с точкой заблокирована</em></p>\n<p>Можно городить отдельный метод проверки, а можно сделать вот так:</p>\n<pre><code class=\"language-xml\">&#x3C;!-- Само поле ввода чисел в калькулятор -->\n&#x3C;Input enabled=\"false\" value=\"{viewState>/input}\"/>\n\n&#x3C;!-- ... -->\n\n&#x3C;Button text=\".\" \n  press=\"appendSymbolToLine\" \n  enabled=\"{= !${viewState>/input}.includes('.') }\"/>\n</code></pre>\n<p>Просто проверять, есть ли в строке ввода точки :)</p>\n<p><strong>И напоследок расскажу, как привязывать хендлеры к событию изменения конкретного проперти в JSON-модели:</strong></p>\n<p>Хитрость заключается в том, что если для этого мы будем использовать класс <strong>sap.ui.model.Binding</strong>, то у нас ничего хорошего не получится. Т.к. хендлер будет запускаться каждый раз, когда изменится <strong>вообще какое-либо</strong> поле в этой модели. </p>\n<p>А для привязки к конкретному полю существует специальный класс: <strong>sap.ui.model.json.JSONPropertyBinding</strong>.</p>\n<p>Давайте для примера прикрутим к нашему калькулятору какой-нибудь хендлер изменения данных в модели. Например, будем рисовать toast-сообщение, при записи значения в память нашего калькулятора (при нажатии кнопок M+ и M-)</p>\n<p>Для удобства напишем метод, который будет принимать два аргумента: путь до проперти модели, за которым будем наблюдать; и функцию, которая будет запускаться при изменении этого поля:</p>\n<pre><code class=\"language-javascript\">  addViewStateListener: function(path, callback) {\n    var oBinding = new sap.ui.model.json.JSONPropertyBinding(this.viewState, path);\n    oBinding.attachChange(callback);\n  }\n</code></pre>\n<p>Затем напишем функцию, вызывающую сообщение и привяжем её к проперти</p>\n<pre><code class=\"language-javascript\">  memoryUsage: function(event){\n    sap.m.MessageToast.show(\"Memory usage! Set \" + event.getSource().getValue());\n  }\n\n  // [....]\n        onInit: function() {\n      // [....]\n      // При инициализации привязываем нашу функцию к проперти модели\n            this.addViewStateListener(\"/memory\", this.memoryUsage);\n        },\n</code></pre>\n<p>Готово! При нажатии на m+ получаем вот такое сообщение:</p>\n<p><img src=\"/assets/blog/sapui5-state-part2/calc_handler.jpg\" alt=\"Calc handler\"></p>\n<p>Как всегда, код примера <a href=\"https://github.com/JustAddAcid/sapui5-calculator\">((вот здесь))</a></p>\n<p>Ещё увидимся</p>\n","ogImage":{"url":"/assets/blog/sapui5-state-part2/background.jpg"},"coverImage":"/assets/blog/sapui5-state-part2/background.jpg","issueId":"11"}},"__N_SSG":true}